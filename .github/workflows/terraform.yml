name: Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Action'
        required: true
        default: 'apply'
        type: choice
        options:
          - validate
          - plan
          - apply
      confirm_apply:
        description: 'Confirm apply (required for apply action)'
        required: false
        default: false
        type: boolean

env:
  DEFAULT_ENVIRONMENT: 'dev'
  DEFAULT_ACTION: 'apply'

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./env/${{ github.event.inputs.environment || env.DEFAULT_ENVIRONMENT }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.8.0'
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      
      - name: Create S3 Bucket for State Storage
        run: |
          # Set bucket name based on environment
          if [ "${{ github.event.inputs.environment || env.DEFAULT_ENVIRONMENT }}" = "dev" ]; then
            BUCKET_NAME="my-new-terra-task-dev-state"
          else
            BUCKET_NAME="my-new-terra-task-prod-state"
          fi
          
          echo "Creating S3 bucket: $BUCKET_NAME"
          
          # Check if bucket exists, create if it doesn't
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket doesn't exist, creating..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region us-east-1
            echo "Bucket created successfully"
          else
            echo "Bucket already exists, skipping creation"
          fi
          
          # Enable versioning for state file safety
          aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
          echo "Bucket versioning enabled"
      
      - name: Verify S3 Bucket Access
        run: |
          if [ "${{ github.event.inputs.environment || env.DEFAULT_ENVIRONMENT }}" = "dev" ]; then
            BUCKET_NAME="my-new-terra-task-dev-state"
          else
            BUCKET_NAME="my-new-terra-task-prod-state"
          fi
          
          echo "Verifying access to bucket: $BUCKET_NAME"
          aws s3 ls s3://"$BUCKET_NAME" || echo "Bucket is empty (expected for new bucket)"
          echo "S3 bucket access verified"
      
      - name: Terraform Format
        run: |
          echo "Formatting Terraform files..."
          terraform fmt -recursive
          echo "Terraform formatting completed"
      
      - name: Terraform Init
        run: |
          echo "Initializing Terraform..."
          terraform init
          echo "Terraform initialized successfully"
      
      - name: Terraform Validate
        run: |
          echo "Validating Terraform configuration..."
          terraform validate
          echo "Terraform configuration is valid"
      
      - name: Terraform Plan
        if: ${{ (github.event.inputs.action || env.DEFAULT_ACTION) == 'plan' || (github.event.inputs.action || env.DEFAULT_ACTION) == 'apply' }}
        run: |
          echo "Creating Terraform execution plan..."
          terraform plan -detailed-exitcode -out=tfplan
          echo "Terraform plan completed successfully"
      
      - name: Terraform Plan Summary
        if: ${{ (github.event.inputs.action || env.DEFAULT_ACTION) == 'plan' || (github.event.inputs.action || env.DEFAULT_ACTION) == 'apply' }}
        run: |
          echo "Plan Summary:"
          terraform show -no-color tfplan
      
      - name: Pre-Apply Validation
        if: ${{ (github.event.inputs.action || env.DEFAULT_ACTION) == 'apply' }}
        run: |
          echo "Final validation before apply..."
          terraform validate
          echo "Pre-apply validation passed"
      
      - name: Apply Confirmation Check
        if: ${{ (github.event.inputs.action || env.DEFAULT_ACTION) == 'apply' }}
        run: |
          if [ "${{ github.event.inputs.confirm_apply }}" != "true" ]; then
            echo "Apply confirmation required but not provided"
            echo "Please set 'confirm_apply' to true to proceed with apply"
            exit 1
          fi
          echo "Apply confirmation verified"
      
      - name: Terraform Apply
        if: ${{ (github.event.inputs.action || env.DEFAULT_ACTION) == 'apply' }}
        run: |
          echo "Applying Terraform changes..."
          echo "Environment: ${{ github.event.inputs.environment || env.DEFAULT_ENVIRONMENT }}"
          terraform apply -auto-approve tfplan
          echo "Terraform apply completed successfully"
      
      - name: Post-Apply Validation
        if: ${{ (github.event.inputs.action || env.DEFAULT_ACTION) == 'apply' }}
        run: |
          echo "Validating deployed infrastructure..."
          terraform output
          echo "Infrastructure deployment validated"
